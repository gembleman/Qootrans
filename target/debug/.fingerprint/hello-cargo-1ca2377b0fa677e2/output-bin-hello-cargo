{"message":"variable `J2K_InitializeEx` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src\\main.rs","byte_start":311,"byte_end":327,"line_start":11,"line_end":11,"column_start":13,"column_end":29,"is_primary":true,"text":[{"text":"        let J2K_InitializeEx: Symbol<unsafe fn(&str, &str) -> bool> = lib.get(b\"J2K_InitializeEx\").expect(\"Failed to load function\");","highlight_start":13,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_snake_case)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":311,"byte_end":327,"line_start":11,"line_end":11,"column_start":13,"column_end":29,"is_primary":true,"text":[{"text":"        let J2K_InitializeEx: Symbol<unsafe fn(&str, &str) -> bool> = lib.get(b\"J2K_InitializeEx\").expect(\"Failed to load function\");","highlight_start":13,"highlight_end":29}],"label":null,"suggested_replacement":"j2_k_initialize_ex","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: variable `J2K_InitializeEx` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:11:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let J2K_InitializeEx: Symbol<unsafe fn(&str, &str) -> bool> = lib.get(b\"J2K_InitializeEx\").expect(\"Failed to load function\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: convert the identifier to snake case: `j2_k_initialize_ex`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(non_snake_case)]` on by default\u001b[0m\n\n"}
{"message":"variable `J2K_TranslateMMNTW` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src\\main.rs","byte_start":1234,"byte_end":1252,"line_start":25,"line_end":25,"column_start":13,"column_end":31,"is_primary":true,"text":[{"text":"        let J2K_TranslateMMNTW: Symbol<extern \"C\" fn(*mut c_int, *mut c_char) -> bool> = lib.get(b\"J2K_TranslateMMNTW\").expect(\"Failed to load function\");","highlight_start":13,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":1234,"byte_end":1252,"line_start":25,"line_end":25,"column_start":13,"column_end":31,"is_primary":true,"text":[{"text":"        let J2K_TranslateMMNTW: Symbol<extern \"C\" fn(*mut c_int, *mut c_char) -> bool> = lib.get(b\"J2K_TranslateMMNTW\").expect(\"Failed to load function\");","highlight_start":13,"highlight_end":31}],"label":null,"suggested_replacement":"j2_k_translate_mmntw","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: variable `J2K_TranslateMMNTW` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:25:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let J2K_TranslateMMNTW: Symbol<extern \"C\" fn(*mut c_int, *mut c_char) -> bool> = lib.get(b\"J2K_TranslateMMNTW\").expect(\"Failed to load function\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: convert the identifier to snake case: `j2_k_translate_mmntw`\u001b[0m\n\n"}
{"message":"2 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: 2 warnings emitted\u001b[0m\n\n"}
